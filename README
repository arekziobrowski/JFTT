#Kompilator

Projekt zawiera pliki:
	- parser.y - plik zawierający parser.
	- lexer.l - plik zawierający lekser.
	- symtable.h - plik nagłówkowy zawierający tablicę symboli używaną w czasie kompilacji (zaimplementowana jako stos).
	- error.sh - plik nagłówkowy zawierający definicje błędów używanych w czasie kompilacji.
	- machineprinter.h - plik nagłówkowy zawierający strukturę danych, w której przechowywane są komendy asemblera w czasie kompilacji.
	- whilestack.h - plik nagłówkowy zawierający stos, który jest wykorzystywany w implementacji pętli while.
	- jumpstack.h - plik nagłówkowy zawierający stos, który jest wykorzystywany do obsługi skoków, przechowywania numerów linii ze skokami.
	- interpreter.cc
	- interpreter-cln.cc
	- Makefile

Wymagania:
	- gcc (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609
	- flex 2.6.0
	- bison 3.0.4

	Do skompilowania jest potrzebne makro _BSD_SOURCE, które zapewnia poprawne działania funkcji 'strdup' dla programu w języku C w standardzie c99.
	Więcej o wymaganiach makr dla strdupa w 'man strdup':
		strdup():
           _SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE >= 500 ||
           _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
           || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L //wymagane jedno z makr

    W przypadku problemów można spróbować skompilować program bez tej flagi, bądź zastąpić flagę -D_BSD_SOURCE oraz -std=c99 na -std=gnu11.

Uruchomienie:
	Aby zbudować projekt należy użyć polecenia 'make'. Do zbudowania samego kompilatora należy użyć polecenia 'make compiler', a do zbudowania samego interpretera 'make interpreter'.

	Plik wykonywalny kompilatora nazywa się 'out'.
	Aby skompilować program należy wywołać komendę './out < program.imp', gdzie 'program.imp' to przykładowy program.

	Plik wyjściowy asemblera, czyli wynik działania kompilatora znajduje się w pliku wynik.txt, który jest tworzony w tym samym katalogu, w jakim został uruchomiony plik 'out'.

	Wywołanie interpretera z wynikowym plikiem kompilacji:
		./interpreter wynik.txt

